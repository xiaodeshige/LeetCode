class TreeNode{
    int val;
    int count;
    TreeNode left;
    TreeNode right;
    public TreeNode(int val, int count){
        this.val=val;
        this.count=count;
    }
}

public class Solution {
    /*public List<Integer> countSmaller(int[] nums) {
        List<Integer> res=new ArrayList<>();
        List<Integer> bi=new ArrayList<>();
        for(int i=nums.length-1; i>=0; i--){
            int pos=binarySearch(bi, nums[i]);
            bi.add(pos, nums[i]);
            res.add(0, pos);
        }
        return res;
    }
    
    public int binarySearch(List<Integer> bi, int e){
        //find the first element bigger than or equal to e
        if(bi.size()==0) return 0;
        if(e<=bi.get(0)) return 0;        
        if(e>bi.get(bi.size()-1)) return bi.size();
        int lo=0, hi=bi.size()-1;
        while(lo+1<hi){
            int mid=lo+(hi-lo)/2;
            if(bi.get(mid)<e) lo=mid+1;
            else hi=mid;
        }
        
        if(bi.get(lo)>=e) return lo;
        else return hi;
    }*/
    
    public List<Integer> countSmaller(int[] nums){        
        List<Integer> res=new ArrayList<>();
        if(nums==null||nums.length==0) return res;
        int n=nums.length-1;
        TreeNode root=new TreeNode(nums[n], 0);
        res.add(0);
        for(int i=n-1; i>=0; i--){
            int pos=insert(root, nums[i]);
            res.add(0, pos);
        }
        return res;
    }
    //count表示比当前节点值小的节点数
    public int insert(TreeNode root, int target){
        int count=0;
        if(target>root.val){
            count=root.count+1;
            if(root.right==null){
                TreeNode node=new TreeNode(target, count);
                root.right=node;
            }
            else{
                root=root.right;
                count+=insert(root, target);
            }    
        }
        else{
            root.count++;
            if(root.left==null){
                TreeNode node=new TreeNode(target, count);
                root.left=node;
            }
            else{
                root=root.left;
                count+=insert(root, target);
            }                
        }
        return count;
    }
}