public class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> res=new ArrayList<>();
        if(num == null || num.length() == 0) return res;
        dfs(num, target, res, "", 0, 0, 0);
        return res;
    }
    
    public void dfs(String num, int target, List<String> res, String path, int pos, long cur, long diff){
      
        if(pos==num.length()){
           if(cur==target)
            res.add(path);
            return;
        }
        
        for(int i=pos; i<num.length(); i++){
            if(i!=pos&&num.charAt(pos)=='0') break;
            long curString=Long.parseLong(num.substring(pos, i+1));
            if(pos==0){
                dfs(num, target, res, path+curString, i+1, curString, curString);
            }
            else{
                dfs(num, target, res, path+"+"+curString, i+1, cur+curString, curString);
                dfs(num, target, res, path+"-"+curString, i+1, cur-curString, -curString);
                dfs(num, target, res, path+"*"+curString, i+1, cur-diff+diff*curString, diff*curString);
            }
        }
    }   
}