/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode dummy=new ListNode(0);
        dummy.next=head;
        ListNode nk=findK(head, k);
        ListNode n0=dummy;
        while(nk!=null){            
            ListNode n1=reverseK(n0, nk.next, k);
            nk=findK(n1.next, k);
            n0=n1;
        }
        return dummy.next;
    }
    
    public ListNode findK(ListNode head, int k){
        //give n1
        //return nk
        int i=1;
        while(i<k&&head!=null){
            head=head.next;
            i++;
            if(head==null) return null;
        }
        return head;
    }
    
    public ListNode reverseK(ListNode head, ListNode tail, int k){
        //n0->n1->n2->...->nk->nk+1
        //n0->nk->...->n2->n1->nk+1
        //return n1
        ListNode n0=head, n1=head.next;        
        ListNode nk=reverse(n1, k);
        n0.next=nk;
        n1.next=tail;
        return n1;
    }
    
    public ListNode reverse(ListNode head, int k){
        ListNode pre=null;
        int i=0;
        while(i<k){
            ListNode temp=head.next;
            head.next=pre;
            pre=head;
            head=temp;
            i++;
        }
       return pre; 
    }
}