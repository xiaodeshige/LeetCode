/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null) return null;
        if(key<root.val){
            root.left=deleteNode(root.left, key);
        }
        else if(key>root.val){
            root.right=deleteNode(root.right, key);
        }
        else{            
            if(root.left==null) return root.right;
            else if(root.right==null) return root.left;
            else{
                TreeNode node=findMin(root.right);
                root.val=node.val;
                root.right=deleteNode(root.right, root.val);
            }
        }
        
        return root;
    }
    
    public TreeNode findMin(TreeNode node){
        while(node.left!=null){
            node=node.left;
        }
        return node;
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if(root==null) return null;
        return find(root, key);            
    }
    
    public TreeNode find(TreeNode root, int key){
        TreeNode parent=null;
        TreeNode cur=root;
        
        if(root.val==key){
            if(root.left!=null){
                TreeNode node=findLargest(root.left);
                node.right=root.right;
                return root.left;
            }
            else{
                root=root.right;
           
                return root;
            }
        }
        
        while(root!=null){
            
            if(root.val==key){
                if(parent.val>root.val){
                    if(root.left!=null){
                        System.out.println(root.left.val);
                        parent.left=root.left;
                        TreeNode node=findLargest(root.left);
                        node.right=root.right;
                    }
                    else
                        parent.left=root.right;
                }
                else if(parent.val<root.val){
                    if(root.left!=null){
                        parent.right=root.left;
                        TreeNode node=findLargest(root.left);
                        node.right=root.right;
                    }
                    else
                        parent.right=root.right; 
                }       
                return cur;
            }
            
            else if(root.val<key){
                parent=root;
                root=root.right;
            }
            else{
                parent=root;
                root=root.left;
            }                        
        }
       return cur;
    }
    
    public TreeNode findLargest(TreeNode root){        
        while(root.right!=null){        
            root=root.right;
        }
        return root;
    }
}