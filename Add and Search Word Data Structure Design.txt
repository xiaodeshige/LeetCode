public class WordDictionary {
    
    class TreeNode{
        TreeNode[] children;
        boolean isWord;
        
        public TreeNode(){
            children=new TreeNode[26];
            isWord=false;
        }
        
    }
    
    TreeNode root;
    /** Initialize your data structure here. */
    public WordDictionary() {
        root=new TreeNode();        
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        
        TreeNode cur=root;
        
        for(int i=0; i<word.length(); i++){
            
            char c=word.charAt(i);
            
            if(cur.children[c-'a']==null){
                TreeNode newNode=new TreeNode();
                cur.children[c-'a']=newNode;
            }
            
                cur=cur.children[c-'a'];
            
            
        }
        
        cur.isWord=true;
        
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return helper(word, 0, root);
    }
    
    public boolean helper(String word, int pos, TreeNode cur){
        
        if(pos==word.length())
            return cur.isWord;
       
        if(word.charAt(pos)=='.'){
            for(int i=0; i<26; i++){
                if(cur.children[i]!=null&&helper(word, pos+1, cur.children[i])==true){
                    return true;
                        
                }              
            }
            return false;
          
        }
        else{
            char c=word.charAt(pos);
            return cur.children[c-'a']!=null&&helper(word, pos+1, cur.children[c-'a']);
        }
        
        
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */