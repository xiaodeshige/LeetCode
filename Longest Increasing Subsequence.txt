class Solution {
    public int lengthOfLIS(int[] nums) {
        /*int res=Integer.MIN_VALUE;
        int n=nums.length;
        int[] dp=new int[n];
        Arrays.fill(dp, 1);
        for(int i=1; i<n; i++){
            for(int j=0; j<i; j++){
                if(nums[i]>nums[j]){
                    dp[i]=Math.max(dp[i], dp[j]+1);
                }
            }
        }
        
        for(int i=0; i<n; i++){
            res=Math.max(res, dp[i]);
        }
        return res;*/
        if(nums.length==0||nums==null) return 0;
        List<Integer> list=new ArrayList<>();
        //list.add(nums[0]);
        for(int i=0; i<nums.length; i++){
            int target=nums[i];
            if(i==0||target>list.get(list.size()-1))
                list.add(target);
            else{
                int l=0;
                int h=list.size()-1;
                
                int index=0;
                //在list里找第一个比target大或者等于target的数
                while(l+1<h){
                    int mid=(l+h)/2;
                    if(list.get(mid)>=target)
                        h=mid;
                    else
                        l=mid+1;
                }
                
                if(list.get(l)>=target){
                    index=l;
                }
                else if(list.get(h)>=target)
                    index=h;
                
                list.set(index, target);
            }
        }
        return list.size();
    }
}