//Solution 1
class Solution {
    public int findKthLargest(int[] nums, int k) {
        //minimum heap by default; e1-e2 is the minimum heap
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        
        for(int num:nums){          
                        
            pq.offer(num);
            
            //the size of the priority queue is k
            if(pq.size()>k)
                pq.poll();
            
        }
        return pq.peek();
    }
}

//Solution 2
class Solution {
    public int findKthLargest(int[] nums, int k) {
        int l=0;
        int r=nums.length-1;
        
        while(true){
            int pos=partition(nums, l, r);
            if(pos==k-1)
                return nums[pos];
            else if(pos<k-1){
                l=pos+1;
            }
            else
                r=pos-1;
        }
    }
    //sort the array from big to small
    public int partition(int[] nums, int left, int right){
        int pivot=nums[left];
        int l=left+1;
        int r=right;
        
        while(l<=r){            
            while(l<=r&&nums[l]>pivot) {
                l++;
            }
            while(l<=r&&nums[r]<pivot) {
                r--;
            }
            if(l<=r){
                swap(nums, l, r);
                
                l++;
                r--;
            }
        }
        //Find the correct position of nums[left]
        swap(nums, left, r);
        return r;
    }
    
    public void swap(int[] nums, int left, int right){
        int temp=nums[left];
        nums[left]=nums[right];
        nums[right]=temp;
    }
}