class TrieNode{
    TrieNode[] next=new TrieNode[26];
    String w;
}

public class Solution {
    public List<String> findWords(char[][] board, String[] words) {
        List<String> res=new ArrayList<>();
        int m=board.length; int n=board[0].length;
        TrieNode root=buildTrie(words);
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                helper(board, i, j, root, res);
            }
        }
        return res;
    }
    
    public void helper(char[][] board, int x, int y, TrieNode p, List<String> res){
        char c=board[x][y];
        if(board[x][y]=='#'||p.next[c-'a']==null)
            return;
        p=p.next[c-'a'];  
        if(p.w!=null){
            res.add(p.w);
            p.w=null;
        }
        
        board[x][y]='#';
        if(x>0) helper(board, x-1, y, p, res);
        if(y>0) helper(board, x, y-1, p, res);
        if(x+1<board.length) helper(board, x+1, y, p, res);
        if(y+1<board[0].length) helper(board, x, y+1, p, res);
        board[x][y]=c;
    }
    
    public TrieNode buildTrie(String[] words){
        TrieNode root=new TrieNode();
        for(String word:words){
            TrieNode p=root;
            for(int i=0; i<word.length(); i++){
                int c=word.charAt(i)-'a';
                if(p.next[c]==null){
                    TrieNode newNode=new TrieNode();
                    p.next[c]=newNode;
                }
                p=p.next[c];
            }
            p.w=word;
        }
        return root;
    }

    
}